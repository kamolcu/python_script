# -*- coding: utf-8 -*-
import textwrap
with open('D:\github\phpunit\src\Framework\Assert.php', 'r') as f_handle:
    data = f_handle.readlines()
    for line in data:
        #print line,
        if "* Assert" in line:
            output = line.replace('*', '//').strip()
            if output[-1:] != '.':
                output = output + '...'
            print output
        if "public static function" in line:
            wrapper = textwrap.TextWrapper(width=80,break_long_words=False,replace_whitespace=False)
            print '\n'. join(wrapper.wrap(line)).strip()
            print '...'

# output
# // Asserts that an array has a specified key.
# public static function assertArrayHasKey($key, $array, $message = '')
# ...
# // Asserts that an array does not have a specified key.
# public static function assertArrayNotHasKey($key, $array, $message = '')
# ...
# // Asserts that a haystack contains a needle.
# public static function assertContains($needle, $haystack, $message = '',
# $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity
# = false)
# ...
# // Asserts that a haystack that is stored in a static attribute of a class...
# public static function assertAttributeContains($needle,
# $haystackAttributeName, $haystackClassOrObject, $message = '', $ignoreCase =
# false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false)
# ...
# // Asserts that a haystack does not contain a needle.
# public static function assertNotContains($needle, $haystack, $message = '',
# $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity
# = false)
# ...
# // Asserts that a haystack that is stored in a static attribute of a class...
# public static function assertAttributeNotContains($needle,
# $haystackAttributeName, $haystackClassOrObject, $message = '', $ignoreCase =
# false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false)
# ...
# // Asserts that a haystack contains only values of a given type.
# public static function assertContainsOnly($type, $haystack, $isNativeType =
# null, $message = '')
# ...
# // Asserts that a haystack contains only instances of a given classname...
# public static function assertContainsOnlyInstancesOf($classname, $haystack,
# $message = '')
# ...
# // Asserts that a haystack that is stored in a static attribute of a class...
# public static function assertAttributeContainsOnly($type,
# $haystackAttributeName, $haystackClassOrObject, $isNativeType = null, $message =
# '')
# ...
# // Asserts that a haystack does not contain only values of a given type.
# public static function assertNotContainsOnly($type, $haystack, $isNativeType
# = null, $message = '')
# ...
# // Asserts that a haystack that is stored in a static attribute of a class...
# public static function assertAttributeNotContainsOnly($type,
# $haystackAttributeName, $haystackClassOrObject, $isNativeType = null, $message =
# '')
# ...
# // Asserts the number of elements of an array, Countable or Traversable.
# public static function assertCount($expectedCount, $haystack, $message = '')
# ...
# // Asserts the number of elements of an array, Countable or Traversable...
# public static function assertAttributeCount($expectedCount,
# $haystackAttributeName, $haystackClassOrObject, $message = '')
# ...
# // Asserts the number of elements of an array, Countable or Traversable.
# public static function assertNotCount($expectedCount, $haystack, $message =
# '')
# ...
# // Asserts the number of elements of an array, Countable or Traversable...
# public static function assertAttributeNotCount($expectedCount,
# $haystackAttributeName, $haystackClassOrObject, $message = '')
# ...
# // Asserts that two variables are equal.
# public static function assertEquals($expected, $actual, $message = '',
# $delta = 0.0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that a variable is equal to an attribute of an object.
# public static function assertAttributeEquals($expected,
# $actualAttributeName, $actualClassOrObject, $message = '', $delta = 0.0,
# $maxDepth = 10, $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that two variables are not equal.
# public static function assertNotEquals($expected, $actual, $message = '',
# $delta = 0.0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that a variable is not equal to an attribute of an object.
# public static function assertAttributeNotEquals($expected,
# $actualAttributeName, $actualClassOrObject, $message = '', $delta = 0.0,
# $maxDepth = 10, $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that a variable is empty.
# public static function assertEmpty($actual, $message = '')
# ...
# // Asserts that a static attribute of a class or an attribute of an object...
# public static function assertAttributeEmpty($haystackAttributeName,
# $haystackClassOrObject, $message = '')
# ...
# // Asserts that a variable is not empty.
# public static function assertNotEmpty($actual, $message = '')
# ...
# // Asserts that a static attribute of a class or an attribute of an object...
# public static function assertAttributeNotEmpty($haystackAttributeName,
# $haystackClassOrObject, $message = '')
# ...
# // Asserts that a value is greater than another value.
# public static function assertGreaterThan($expected, $actual, $message = '')
# ...
# // Asserts that an attribute is greater than another value.
# public static function assertAttributeGreaterThan($expected,
# $actualAttributeName, $actualClassOrObject, $message = '')
# ...
# // Asserts that a value is greater than or equal to another value.
# public static function assertGreaterThanOrEqual($expected, $actual, $message
# = '')
# ...
# // Asserts that an attribute is greater than or equal to another value.
# public static function assertAttributeGreaterThanOrEqual($expected,
# $actualAttributeName, $actualClassOrObject, $message = '')
# ...
# // Asserts that a value is smaller than another value.
# public static function assertLessThan($expected, $actual, $message = '')
# ...
# // Asserts that an attribute is smaller than another value.
# public static function assertAttributeLessThan($expected,
# $actualAttributeName, $actualClassOrObject, $message = '')
# ...
# // Asserts that a value is smaller than or equal to another value.
# public static function assertLessThanOrEqual($expected, $actual, $message =
# '')
# ...
# // Asserts that an attribute is smaller than or equal to another value.
# public static function assertAttributeLessThanOrEqual($expected,
# $actualAttributeName, $actualClassOrObject, $message = '')
# ...
# // Asserts that the contents of one file is equal to the contents of another...
# public static function assertFileEquals($expected, $actual, $message = '',
# $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that the contents of one file is not equal to the contents of...
# public static function assertFileNotEquals($expected, $actual, $message =
# '', $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that the contents of a string is equal...
# public static function assertStringEqualsFile($expectedFile, $actualString,
# $message = '', $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that the contents of a string is not equal...
# public static function assertStringNotEqualsFile($expectedFile,
# $actualString, $message = '', $canonicalize = false, $ignoreCase = false)
# ...
# // Asserts that a file exists.
# public static function assertFileExists($filename, $message = '')
# ...
# // Asserts that a file does not exist.
# public static function assertFileNotExists($filename, $message = '')
# ...
# // Asserts that a condition is true.
# public static function assertTrue($condition, $message = '')
# ...
# // Asserts that a condition is not true.
# public static function assertNotTrue($condition, $message = '')
# ...
# // Asserts that a condition is false.
# public static function assertFalse($condition, $message = '')
# ...
# // Asserts that a condition is not false.
# public static function assertNotFalse($condition, $message = '')
# ...
# // Asserts that a variable is not null.
# public static function assertNotNull($actual, $message = '')
# ...
# // Asserts that a variable is null.
# public static function assertNull($actual, $message = '')
# ...
# // Asserts that a class has a specified attribute.
# public static function assertClassHasAttribute($attributeName, $className,
# $message = '')
# ...
# // Asserts that a class does not have a specified attribute.
# public static function assertClassNotHasAttribute($attributeName,
# $className, $message = '')
# ...
# // Asserts that a class has a specified static attribute.
# public static function assertClassHasStaticAttribute($attributeName,
# $className, $message = '')
# ...
# // Asserts that a class does not have a specified static attribute.
# public static function assertClassNotHasStaticAttribute($attributeName,
# $className, $message = '')
# ...
# // Asserts that an object has a specified attribute.
# public static function assertObjectHasAttribute($attributeName, $object,
# $message = '')
# ...
# // Asserts that an object does not have a specified attribute.
# public static function assertObjectNotHasAttribute($attributeName, $object,
# $message = '')
# ...
# // Asserts that two variables have the same type and value.
# public static function assertSame($expected, $actual, $message = '')
# ...
# // Asserts that a variable and an attribute of an object have the same type...
# public static function assertAttributeSame($expected, $actualAttributeName,
# $actualClassOrObject, $message = '')
# ...
# // Asserts that two variables do not have the same type and value.
# public static function assertNotSame($expected, $actual, $message = '')
# ...
# // Asserts that a variable and an attribute of an object do not have the...
# public static function assertAttributeNotSame($expected,
# $actualAttributeName, $actualClassOrObject, $message = '')
# ...
# // Asserts that a variable is of a given type.
# public static function assertInstanceOf($expected, $actual, $message = '')
# ...
# // Asserts that an attribute is of a given type.
# public static function assertAttributeInstanceOf($expected, $attributeName,
# $classOrObject, $message = '')
# ...
# // Asserts that a variable is not of a given type.
# public static function assertNotInstanceOf($expected, $actual, $message =
# '')
# ...
# // Asserts that an attribute is of a given type.
# public static function assertAttributeNotInstanceOf($expected,
# $attributeName, $classOrObject, $message = '')
# ...
# // Asserts that a variable is of a given type.
# public static function assertInternalType($expected, $actual, $message = '')
# ...
# // Asserts that an attribute is of a given type.
# public static function assertAttributeInternalType($expected,
# $attributeName, $classOrObject, $message = '')
# ...
# // Asserts that a variable is not of a given type.
# public static function assertNotInternalType($expected, $actual, $message =
# '')
# ...
# // Asserts that an attribute is of a given type.
# public static function assertAttributeNotInternalType($expected,
# $attributeName, $classOrObject, $message = '')
# ...
# // Asserts that a string matches a given regular expression.
# public static function assertRegExp($pattern, $string, $message = '')
# ...
# // Asserts that a string does not match a given regular expression.
# public static function assertNotRegExp($pattern, $string, $message = '')
# ...
# // Assert that the size of two arrays (or `Countable` or `Traversable` objects)...
# public static function assertSameSize($expected, $actual, $message = '')
# ...
# // Assert that the size of two arrays (or `Countable` or `Traversable` objects)...
# public static function assertNotSameSize($expected, $actual, $message = '')
# ...
# // Asserts that a string matches a given format string.
# public static function assertStringMatchesFormat($format, $string, $message
# = '')
# ...
# // Asserts that a string does not match a given format string.
# public static function assertStringNotMatchesFormat($format, $string,
# $message = '')
# ...
# // Asserts that a string matches a given format file.
# public static function assertStringMatchesFormatFile($formatFile, $string,
# $message = '')
# ...
# // Asserts that a string does not match a given format string.
# public static function assertStringNotMatchesFormatFile($formatFile,
# $string, $message = '')
# ...
# // Asserts that a string starts with a given prefix.
# public static function assertStringStartsWith($prefix, $string, $message =
# '')
# ...
# // Asserts that a string starts not with a given prefix.
# public static function assertStringStartsNotWith($prefix, $string, $message
# = '')
# ...
# // Asserts that a string ends with a given suffix.
# public static function assertStringEndsWith($suffix, $string, $message = '')
# ...
# // Asserts that a string ends not with a given suffix.
# public static function assertStringEndsNotWith($suffix, $string, $message =
# '')
# ...
# // Asserts that two XML files are equal.
# public static function assertXmlFileEqualsXmlFile($expectedFile,
# $actualFile, $message = '')
# ...
# // Asserts that two XML files are not equal.
# public static function assertXmlFileNotEqualsXmlFile($expectedFile,
# $actualFile, $message = '')
# ...
# // Asserts that two XML documents are equal.
# public static function assertXmlStringEqualsXmlFile($expectedFile,
# $actualXml, $message = '')
# ...
# // Asserts that two XML documents are not equal.
# public static function assertXmlStringNotEqualsXmlFile($expectedFile,
# $actualXml, $message = '')
# ...
# // Asserts that two XML documents are equal.
# public static function assertXmlStringEqualsXmlString($expectedXml,
# $actualXml, $message = '')
# ...
# // Asserts that two XML documents are not equal.
# public static function assertXmlStringNotEqualsXmlString($expectedXml,
# $actualXml, $message = '')
# ...
# // Asserts that a hierarchy of DOMElements matches.
# public static function assertEqualXMLStructure(DOMElement $expectedElement,
# DOMElement $actualElement, $checkAttributes = false, $message = '')
# ...
# // Assert the presence, absence, or count of elements in a document matching...
# public static function assertSelectCount($selector, $count, $actual,
# $message = '', $isHtml = true)
# ...
# public static function assertSelectRegExp($selector, $pattern, $count,
# $actual, $message = '', $isHtml = true)
# ...
# public static function assertSelectEquals($selector, $content, $count,
# $actual, $message = '', $isHtml = true)
# ...
# public static function assertTag($matcher, $actual, $message = '', $isHtml =
# true)
# ...
# public static function assertNotTag($matcher, $actual, $message = '',
# $isHtml = true)
# ...
# public static function assertThat($value, PHPUnit_Framework_Constraint
# $constraint, $message = '')
# ...
# // Asserts that a string is a valid JSON string.
# public static function assertJson($actualJson, $message = '')
# ...
# // Asserts that two given JSON encoded objects or arrays are equal.
# public static function assertJsonStringEqualsJsonString($expectedJson,
# $actualJson, $message = '')
# ...
# // Asserts that two given JSON encoded objects or arrays are not equal.
# public static function assertJsonStringNotEqualsJsonString($expectedJson,
# $actualJson, $message = '')
# ...
# // Asserts that the generated JSON encoded object and the content of the given file are equal.
# public static function assertJsonStringEqualsJsonFile($expectedFile,
# $actualJson, $message = '')
# ...
# // Asserts that the generated JSON encoded object and the content of the given file are not equal.
# public static function assertJsonStringNotEqualsJsonFile($expectedFile,
# $actualJson, $message = '')
# ...
# // Asserts that two JSON files are not equal.
# public static function assertJsonFileNotEqualsJsonFile($expectedFile,
# $actualFile, $message = '')
# ...
# // Asserts that two JSON files are equal.
# public static function assertJsonFileEqualsJsonFile($expectedFile,
# $actualFile, $message = '')
# ...
# public static function logicalAnd()
# ...
# public static function logicalOr()
# ...
# public static function logicalNot(PHPUnit_Framework_Constraint $constraint)
# ...
# public static function logicalXor()
# ...
# public static function anything()
# ...
# public static function isTrue()
# ...
# public static function callback($callback)
# ...
# public static function isFalse()
# ...
# public static function isJson()
# ...
# public static function isNull()
# ...
# public static function attribute(PHPUnit_Framework_Constraint $constraint,
# $attributeName)
# ...
# public static function contains($value, $checkForObjectIdentity = true,
# $checkForNonObjectIdentity = false)
# ...
# public static function containsOnly($type)
# ...
# public static function containsOnlyInstancesOf($classname)
# ...
# public static function arrayHasKey($key)
# ...
# public static function equalTo($value, $delta = 0.0, $maxDepth = 10,
# $canonicalize = false, $ignoreCase = false)
# ...
# public static function attributeEqualTo($attributeName, $value, $delta =
# 0.0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false)
# ...
# public static function isEmpty()
# ...
# public static function fileExists()
# ...
# public static function greaterThan($value)
# ...
# public static function greaterThanOrEqual($value)
# ...
# public static function classHasAttribute($attributeName)
# ...
# public static function classHasStaticAttribute($attributeName)
# ...
# public static function objectHasAttribute($attributeName)
# ...
# public static function identicalTo($value)
# ...
# public static function isInstanceOf($className)
# ...
# public static function isType($type)
# ...
# public static function lessThan($value)
# ...
# public static function lessThanOrEqual($value)
# ...
# public static function matchesRegularExpression($pattern)
# ...
# public static function matches($string)
# ...
# public static function stringStartsWith($prefix)
# ...
# public static function stringContains($string, $case = true)
# ...
# public static function stringEndsWith($suffix)
# ...
# public static function countOf($count)
# ...
# public static function fail($message = '')
# ...
# public static function readAttribute($classOrObject, $attributeName)
# ...
# public static function getStaticAttribute($className, $attributeName)
# ...
# public static function getObjectAttribute($object, $attributeName)
# ...
# public static function markTestIncomplete($message = '')
# ...
# public static function markTestSkipped($message = '')
# ...
# public static function getCount()
# ...
# public static function resetCount()
# ...